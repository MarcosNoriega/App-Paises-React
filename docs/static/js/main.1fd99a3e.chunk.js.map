{"version":3,"sources":["components/Navbars.js","components/Paises.js","components/Pais.js","App.js","serviceWorker.js","index.js"],"names":["Navbars","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","to","Component","Paises","state","paises","loading","getPaises","region","a","axios","res","setState","data","get","this","props","match","params","role","map","pais","alpha3Code","src","flag","alt","name","Pais","getPais","codigo","class","capital","population","area","App","basename","path","process","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1fd99a3e.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nexport default class Navbars extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n                    <a className=\"navbar-brand\" href=\"#\">Navbar</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav mr-auto\">\r\n                            <li className=\"nav-item\">\r\n                                <NavLink className=\"nav-link\" to=\"/\">Mundo</NavLink>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <NavLink className=\"nav-link\" to=\"/americas\">America</NavLink>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <NavLink className=\"nav-link\" to=\"/europe\">Europa</NavLink>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <NavLink className=\"nav-link\" to=\"/asia\">Asia</NavLink>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <NavLink className=\"nav-link\" to=\"/oceania\">Oceania</NavLink>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <NavLink className=\"nav-link\" to=\"/africa\">Africa</NavLink>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </nav>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport axios from 'axios'\r\n\r\nexport default class Paises extends Component {\r\n\r\n    state = {\r\n        paises: [],\r\n        loading: true\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.match.params.region) {\r\n            this.getPaises();\r\n        } else {\r\n            this.getPaises(this.props.match.params.region);\r\n        }\r\n        \r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.getPaises(this.props.match.params.region);\r\n    }\r\n\r\n    getPaises = async (region) => {\r\n        if (!region) {\r\n            let res = await axios(\"https://restcountries.eu/rest/v2/all\");\r\n\r\n            this.setState({paises: res.data, loading: false});\r\n        } else {\r\n            let res = await axios.get(`https://restcountries.eu/rest/v2/region/${region}`);\r\n\r\n            this.setState({paises: res.data, loading: false});\r\n        }\r\n       \r\n\r\n       \r\n    }\r\n\r\n\r\n    render() {\r\n        if (this.state.loading) {\r\n            return(\r\n                <div className=\"container mt-4\">\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-2\">\r\n                            <div className=\"spinner-border\" role=\"status\">\r\n                                <span className=\"sr-only\">Loading...</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className=\"container mt-4\">\r\n                <div className=\"card-columns\">\r\n                {\r\n                    this.state.paises.map(pais => {\r\n                        return(\r\n                            <NavLink to={\"/pais/\" + pais.alpha3Code}>\r\n                                <div className=\"card\">\r\n                                    <img src={pais.flag} alt=\"\" className=\"card-img-top\"/>\r\n                                    <div className=\"card-body\">\r\n                                        <h1>{pais.name}</h1>\r\n                                        \r\n                                    </div>\r\n                                </div>\r\n                            </NavLink>\r\n                           \r\n                           \r\n                        )\r\n                    })\r\n                }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios';\r\n\r\nexport default class Pais extends Component {\r\n\r\n    state = {\r\n        pais: {},\r\n        loading: true\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getPais(this.props.match.params.codigo);\r\n    }\r\n\r\n    getPais = async (codigo) => {\r\n        let res = await axios.get(`https://restcountries.eu/rest/v2/name/${codigo}`);\r\n\r\n        this.setState({pais: res.data[0], loading: false});\r\n    }\r\n\r\n    render() {\r\n        if (this.state.loading) {\r\n            return(\r\n                <div className=\"container mt-4\">\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-2\">\r\n                            <div className=\"spinner-border\" role=\"status\">\r\n                                <span className=\"sr-only\">Loading...</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        return (\r\n            <div className=\"container mt-4\">\r\n                <div className=\"card mb-3\">\r\n                    <div className=\"row no-gutters\">\r\n                        <div className=\"col-md-4\">\r\n                            <img src={this.state.pais.flag} class=\"card-img\" alt=\"...\" />\r\n                        </div>\r\n                            <div className=\"col-md-8\">\r\n                                <div className=\"card-body\">\r\n                                    <h5 className=\"card-title\">{this.state.pais.name}</h5>\r\n                                    <p className=\"card-text\">La capital de {this.state.pais.name} es {this.state.pais.capital} y su población es de {this.state.pais.population} de habitantes.</p>\r\n                                    <p>{this.state.pais.name} posee un superficie de {this.state.pais.area} km2.</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Navbars from './components/Navbars';\nimport Paises from './components/Paises';\nimport Pais from './components/Pais';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <Navbars basename=\"https://marcosnoriega.github.io/App-Paises-React\"/>\n\n      <Route path={`${process.env.PUBLIC_URL}/`} exact component={Paises} />\n      <Route path={`${process.env.PUBLIC_URL}/:region`} exact component={Paises} />\n      <Route path={`${process.env.PUBLIC_URL}/:codigo`} exact component={Pais} />\n    </Router>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}